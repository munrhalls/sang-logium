- Do not write any comments along with the code. Write only code. No comments. Ever. Zero comments whatsoever.
- Only modify code directly relevant to the specific request. Avoid changing unrelated functionality.
- Never replace code with placeholders like `// ... rest of the processing ...`. Always include complete code.
- Break problems into smaller steps. Think through each step separately before implementing.
- Always provide a complete PLAN with REASONING based on evidence from code and logs before making changes.
- Explain your OBSERVATIONS clearly, then provide REASONING to identify the exact issue. Add console logs when needed to gather more information.

# Critical Rules (Cursor will follow)

- Always return consistent types (arrays never undefined)
- Use optional chaining for nested API properties
- Add try/catch to all API calls
- Provide fallback values for destructured data

# Quality Guidelines (Cursor may skip under pressure)

- Prefer early returns over nested ifs
- Test critical service functions
- Use descriptive variable names
- Log actual API responses during development before defining interfaces
- When API calls fail, always check the actual response structure first
- Never assume API response format - always verify with real data

# Avoid

- Never crash UI on API errors
- Don't use 'any' for core business logic

# File Organization

- Create new files in appropriate folders (components/, hooks/, services/)
- Don't put everything in one file

# Tests

- be aware that for images, due to sanity CMS constraint, the following format is required:
  image: {
  asset: { \_ref: "image-Tb9Ew8CXIwaY6R1kjMvI0uRR-2000x3000-jpg" },
  },
  for the \_ref

      if you put "image-abc" in the _ref, even though it is a test file, it will fail, therefore put the above format

PROJECT DESCRIPTION:
This project is a modern e-commerce web application for high-end audio gear.Tech stack: Next.js (React), TypeScript, Tailwind CSS, Zustand (state management), Sanity (CMS), Google Address Validation API.Purpose: To provide a robust, user-friendly online shop with real-time product management, validated delivery information, and a seamless basket/checkout experience.

# Data Structure Consistency (NEVER CHANGE)

- ALL basket and product operations MUST use `_id` field exclusively
- NEVER use `id` field for basket items or product identification
- Store interface: `BasketItem` uses `_id: string`
- All store methods (addItem, removeItem, updateQuantity) use `_id` parameter
- All component props expecting products use `_id: string`
- All test data must use `_id` field for products and basket items
- All basket.find() operations: `item._id === product._id`
- Database products have `_id` - maintain this consistency throughout app
- DO NOT mix `id` and `_id` - choose `_id` and stick to it everywhere
- When adding products to basket: `{ _id: product._id, name: product.name, ... }`
- All React keys for basket items: `key={item._id}`

# Universal Testing Requirements

## Mandatory Setup

- Clean state between tests: `afterEach(() => { /* reset stores, clear localStorage, etc. */ })`
- Use correct import syntax for the actual codebase version
- Handle async operations with proper awaits/acts
- Mock external dependencies (APIs, localStorage, etc.)

## Test Hygiene

- Each test runs independently
- No shared test data between tests
- Descriptive test names that explain the behavior
- One assertion per logical behavior

## Critical Rule

- **Don't test external libraries** - Test business logic, not if Zustand/React/etc work
- Test user behaviors and edge cases, not library functionality
