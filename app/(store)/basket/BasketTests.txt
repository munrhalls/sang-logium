Test specifications for the individual product page basket experience regarding the "add to cart" button (in the style of your examples):
Add to Cart Button Initial State
Test: "Add to Cart button is visible when product is not in basket"
GIVEN: Product page for Product A
WHEN: Product A is not in the basket
THEN: "Add to Cart" button is visible
Add to Cart Button Click
Test: "Clicking Add to Cart adds product and shows quantity controls"
GIVEN: Product page for Product A, not in basket
WHEN: User clicks "Add to Cart"
THEN: Product A is added to basket with quantity 1
AND: Quantity controls (-, +, X, current quantity) are shown instead of the button
Quantity Increase
Test: "Clicking + increases product quantity"
GIVEN: Product A in basket with quantity 1
WHEN: User clicks +
THEN: Product A quantity increases to 2
AND: Quantity controls remain visible
Quantity Decrease
Test: "Clicking - decreases product quantity but not below 1"
GIVEN: Product A in basket with quantity 2
WHEN: User clicks -
THEN: Product A quantity decreases to 1
AND: If user clicks - again, quantity remains 1 and controls remain visible
Remove Product
Test: "Clicking X removes product and restores Add to Cart button"
GIVEN: Product A in basket with any quantity
WHEN: User clicks X
THEN: Product A is removed from basket
AND: "Add to Cart" button is visible again
UI Consistency
Test: "Quantity controls match product listing behavior"
GIVEN: Product A in basket
WHEN: Viewing quantity controls on product page and product listing
THEN: Controls and behavior are consistent between both views





Test Specifications for the Products Listing Page Basket Experience
1. Add to Cart Button Initial State
Test: "Add to Cart button is visible on product card when product is not in basket"

GIVEN: Products listing page with Product A
WHEN: Product A is not in the basket
THEN: "Add to Cart" button is visible on Product A's card

2. Add to Cart Button Click
Test: "Clicking Add to Cart on product card adds product and shows quantity controls"

GIVEN: Products listing page with Product A, not in basket
WHEN: User clicks "Add to Cart" on Product A's card
THEN: Product A is added to basket with quantity 1
AND: Quantity controls (-, +, X, current quantity) are shown instead of the button on Product A's card

3. Quantity Increase
Test: "Clicking + on product card increases product quantity"

GIVEN: Product A in basket with quantity 1 (on listing page)
WHEN: User clicks + on Product A's card
THEN: Product A quantity increases to 2
AND: Quantity controls remain visible

4a. Quantity Decrease
Test: "Clicking - on product card decreases product quantity"

GIVEN: Product A in basket with quantity 2 (on listing page)
WHEN: User clicks - on Product A's card
THEN: Product A quantity decreases to 1
AND: Quantity controls remain visible

4b. Quantity Decrease Minimum
Test: "Quantity cannot decrease below 1 via - button"

GIVEN: Product A in basket with quantity 1 (on listing page)
WHEN: User clicks - on Product A's card
THEN: Product A quantity remains 1
AND: Quantity controls remain visible

5a. Remove Product
Test: "Clicking X on product card removes product and restores Add to Cart button"

GIVEN: Product A in basket with any quantity (on listing page)
WHEN: User clicks X on Product A's card
THEN: Product A is removed from basket
AND: "Add to Cart" button is visible again on Product A's card

5b. Remove Product
Test: "Clicking X on product card sets that product's quantity in basket to 0"

GIVEN: Product A in basket with any quantity above 0 (on listing page)
WHEN: User clicks X on Product A's card
THEN: that product's quantity in basket is set to 0

6. UI Consistency (Fixed)
Test: "Product card quantity controls render with same structure as individual product page"

GIVEN: Product A in basket with quantity 2
WHEN: Examining quantity controls on Product A's card
THEN: Controls have same CSS classes, data attributes, and aria-labels as individual product page
AND: Button order is: decrease (-), quantity display (2), increase (+), remove (X)

7. State Synchronization (Fixed)
Test: "Product card reflects basket state changes made elsewhere"

GIVEN: Product A in basket with quantity 1, displayed on product card
WHEN: Quantity is increased to 3 via external action (API call, other component)
THEN: Product A's card updates to show quantity 3
AND: All controls remain functional

8. Persistence (Fixed)
Test: "Product card basket state persists after page reload"

GIVEN: Product A added to basket with quantity 2 via product card
WHEN: Page is reloaded (F5 or navigation refresh)
THEN: Product A's card shows quantity controls with quantity 2
AND: "Add to Cart" button is not visible for Product A


































✅ GOOD Test Prompts for Cursor
Store Business Logic Tests
1. Adding Items
Create a failing Jest test in `/app/basket/__tests__/basket-store.test.ts`

**Test: "Adding duplicate items increases quantity, not item count"**
- GIVEN: Empty basket
- WHEN: Add Product A (id: "audio-1", name: "Headphones", price: 100), then add Product A again
- THEN: Basket has 1 unique item with quantity 2

**Technical Setup:**
- Import: `import { basketStore } from '@/stores/basket-store'`
- Product structure: `{ id: string, name: string, price: number }`
- Call: `basketStore.addItem(product)` twice
- Assert: `items.length === 1` and `items[0].quantity === 2`
- Include `afterEach()` to reset store state


2. Removing Items
Create a failing Jest test in `/app/basket/__tests__/basket-store.test.ts`

**Test: "Removing item completely clears it from basket"**
- GIVEN: Basket with Product A (quantity 1)
- WHEN: Remove Product A completely
- THEN: Basket is empty

**Technical Setup:**
- Add item first: `basketStore.addItem(product)`
- Call: `basketStore.removeItem(productId)`
- Assert: `items.length === 0`
- Test YOUR removal logic, not Zustand



3. Quantity Adjustment
Create a failing Jest test in `/app/basket/__tests__/basket-store.test.ts`

**Test: "Quantity cannot be decreased below 1"**
- GIVEN: Basket with Product A (quantity 1)
- WHEN: Attempt to decrease quantity to 0
- THEN: Quantity remains 1, item stays in basket

**Technical Setup:**
- Call: `basketStore.updateQuantity(productId, 0)`
- Assert: `items[0].quantity === 1`
- Test YOUR business rule, not library behavior



4. Total Calculations
Create a failing Jest test in `/app/basket/__tests__/basket-store.test.ts`

**Test: "Basket calculates correct total for multiple items"**
- GIVEN: Empty basket
- WHEN: Add Product A (£100 x2) and Product B (£50 x1)
- THEN: Total equals £250

**Technical Setup:**
- Add items with different quantities
- Assert: `basketStore.getTotal() === 250`
- Test YOUR calculation logic



5. Checkout Enablement
Create a failing Jest test in `/app/basket/__tests__/basket-store.test.ts`

**Test: "Checkout enabled only when basket has items"**
- GIVEN: Empty basket
- WHEN: Check if checkout is enabled, then add item and check again
- THEN: Disabled when empty, enabled when has items

**Technical Setup:**
- Assert: `basketStore.isCheckoutEnabled() === false`
- Add item, then assert: `basketStore.isCheckoutEnabled() === true`



6. Persistence Logic
Create a failing Jest test in `/app/basket/__tests__/basket-persistence.test.ts`

**Test: "Basket state saves to localStorage on changes"**
- GIVEN: Empty basket
- WHEN: Add Product A
- THEN: localStorage contains the product data

**Technical Setup:**
- Mock `localStorage.setItem`
- Call: `basketStore.addItem(product)`
- Assert: `localStorage.setItem` called with correct data
- Test YOUR persistence logic, not localStorage itself



7. Error Handling
Create a failing Jest test in `/app/basket/__tests__/basket-store.test.ts`

**Test: "Invalid product data doesn't crash basket"**
- GIVEN: Empty basket
- WHEN: Attempt to add malformed product (missing required fields)
- THEN: Basket remains empty, no errors thrown

**Technical Setup:**
- Call: `basketStore.addItem({ invalid: 'data' })`
- Assert: `items.length === 0`
- Use `expect().not.toThrow()`

Component/UI Tests (Separate files)




8. BasketButton Display
Create a failing test in `/app/components/__tests__/basket-button.test.tsx`

**Test: "BasketButton shows correct item count"**
- GIVEN: Basket with 3 total items
- WHEN: Render BasketButton
- THEN: Button displays "3"

**Technical Setup:**
- Mock basket store: `jest.mock('@/stores/basket-store')`
- Mock return: `{ totalItems: 3 }`
- Assert: `screen.getByText('3')`



9. Empty Basket UI
Create a failing test in `/app/basket/__tests__/basket-page.test.tsx`

**Test: "Empty basket shows browse products message"**
- GIVEN: Empty basket
- WHEN: Render basket page
- THEN: Shows "no items" message and browse button

**Technical Setup:**
- Mock empty basket store
- Assert: `screen.getByText(/no items/i)`
- Assert: `screen.getByRole('link', { name: /browse/i })`